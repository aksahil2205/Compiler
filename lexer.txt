TYPE : int
ID : main
LEFT_BRAC : (
RIGHT_BRAC : )
OPEN_CURLY : {
TYPE : int
ID : a
SEMI : ;
TYPE : int
ID : b
SEMI : ;
TYPE : int
ID : c
SEMI : ;
TYPE : int
ID : discriminant
SEMI : ;
TYPE : int
ID : root1
SEMI : ;
TYPE : int
ID : root2
SEMI : ;
TYPE : int
ID : realPart
SEMI : ;
TYPE : int
ID : imagPart
SEMI : ;
ID : discriminant
EQUAL : =
ID : b
MULTIPLY : *
ID : b
SUBTRACTION : +
NUM : 4
MULTIPLY : *
ID : a
MULTIPLY : *
ID : c
SEMI : ;
IF : if
LEFT_BRAC : (
ID : discriminant
CHECKNOT_EQUAL : !=
NUM : 0
RIGHT_BRAC : )
OPEN_CURLY : {
ID : root1
EQUAL : =
LEFT_BRAC : (
ID : b
ADDITION : +
ID : discriminant
RIGHT_BRAC : )
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
ID : root2
EQUAL : =
LEFT_BRAC : (
ID : b
SUBTRACTION : +
ID : discriminant
RIGHT_BRAC : )
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
CLOSE_CURLY : }
ELSE : else
IF : if
LEFT_BRAC : (
ID : discriminant
CHECKEQUAL : ==
NUM : 0
RIGHT_BRAC : )
OPEN_CURLY : {
ID : root1
EQUAL : =
ID : b
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
ID : root2
EQUAL : =
ID : b
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
CLOSE_CURLY : }
ELSE : else
OPEN_CURLY : {
ID : realPart
EQUAL : =
ID : b
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
ID : imagPart
EQUAL : =
ID : discriminant
DIVIDE : /
LEFT_BRAC : (
NUM : 2
MULTIPLY : *
ID : a
RIGHT_BRAC : )
SEMI : ;
CLOSE_CURLY : }
CLOSE_CURLY : }
